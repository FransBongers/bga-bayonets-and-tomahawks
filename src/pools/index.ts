// .########...#######...#######..##........######.
// .##.....##.##.....##.##.....##.##.......##....##
// .##.....##.##.....##.##.....##.##.......##......
// .########..##.....##.##.....##.##........######.
// .##........##.....##.##.....##.##.............##
// .##........##.....##.##.....##.##.......##....##
// .##.........#######...#######..########..######.

class Pools {
  protected game: BayonetsAndTomahawksGame;

  public stocks: Record<string, LineStock<BTToken>> = {};

  constructor(game: BayonetsAndTomahawksGame) {
    this.game = game;
    const gamedatas = game.gamedatas;

    this.setupPools({ gamedatas });
  }

  // .##.....##.##....##.########...#######.
  // .##.....##.###...##.##.....##.##.....##
  // .##.....##.####..##.##.....##.##.....##
  // .##.....##.##.##.##.##.....##.##.....##
  // .##.....##.##..####.##.....##.##.....##
  // .##.....##.##...###.##.....##.##.....##
  // ..#######..##....##.########...#######.

  clearInterface() {
    Object.values(this.stocks).forEach((stock) => stock.removeAll());
  }

  updateInterface(gamedatas: BayonetsAndTomahawksGamedatas) {
    this.updatePools(gamedatas);
  }

  // ..######..########.########.##.....##.########.
  // .##....##.##..........##....##.....##.##.....##
  // .##.......##..........##....##.....##.##.....##
  // ..######..######......##....##.....##.########.
  // .......##.##..........##....##.....##.##.......
  // .##....##.##..........##....##.....##.##.......
  // ..######..########....##.....#######..##.......

  setupPoolsStocks({
    gamedatas,
  }: {
    gamedatas: BayonetsAndTomahawksGamedatas;
  }) {
    POOLS.forEach((poolId: string) => {
      this.stocks[poolId] = new LineStock<BTToken>(
        this.game.tokenManager,
        document.getElementById(poolId),
        { center: false, gap: '2px', sort: sortFunction('stackOrder') }
      );
    });

    this.updatePools(gamedatas);
  }

  private updatePools(gamedatas: BayonetsAndTomahawksGamedatas) {
    POOLS.forEach((poolId: string) => {
      const units = gamedatas.units.filter((unit) => unit.location === poolId);
      if (units.length === 0) {
        return;
      }

      this.stocks[poolId].addCards(units);
    });
  }

  // Setup functions
  setupPools({ gamedatas }: { gamedatas: BayonetsAndTomahawksGamedatas }) {
    document
      .getElementById('play_area_container')
      .insertAdjacentHTML('beforeend', tplPoolsContainer());
    this.setupPoolsStocks({ gamedatas });
  }

  // ..######...########.########.########.########.########...######.
  // .##....##..##..........##.......##....##.......##.....##.##....##
  // .##........##..........##.......##....##.......##.....##.##......
  // .##...####.######......##.......##....######...########...######.
  // .##....##..##..........##.......##....##.......##...##.........##
  // .##....##..##..........##.......##....##.......##....##..##....##
  // ..######...########....##.......##....########.##.....##..######.

  // ..######..########.########.########.########.########...######.
  // .##....##.##..........##.......##....##.......##.....##.##....##
  // .##.......##..........##.......##....##.......##.....##.##......
  // ..######..######......##.......##....######...########...######.
  // .......##.##..........##.......##....##.......##...##.........##
  // .##....##.##..........##.......##....##.......##....##..##....##
  // ..######..########....##.......##....########.##.....##..######.

  //  .##.....##.########.####.##.......####.########.##....##
  //  .##.....##....##.....##..##........##.....##.....##..##.
  //  .##.....##....##.....##..##........##.....##......####..
  //  .##.....##....##.....##..##........##.....##.......##...
  //  .##.....##....##.....##..##........##.....##.......##...
  //  .##.....##....##.....##..##........##.....##.......##...
  //  ..#######.....##....####.########.####....##.......##...
}
